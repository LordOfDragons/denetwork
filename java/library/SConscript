import os, sys

Import('globalEnv')

versionString = globalEnv['version']

env = globalEnv.Clone()

# define the targets array and reports dictionary to be filled
parent_targets = {}

configGroup = 'DENetworkJava'
#env.configReport.add('Treat warnings as errors (dev-builds)', 'with_warnerrors', configGroup)

# build scripts
from glob_files import globFiles

# jar
envJar = env.Clone()
envJar.Tool('javac', 'jar')

targetJar = globalEnv.targetManager.TargetJar('DENetwork JAR')
globalEnv.targetManager.add('denetworkjava', targetJar)

targetJar.javaVersion = '11'
targetJar.compileSources(envJar, 'src')
targetJar.buildJar(envJar, 'DENetwork-{}'.format(versionString))
targetJar.aliasBuild(envJar, 'denetworkjava_build')

targetJar.installJar(envJar, 'denetwork-{}'.format(versionString))
targetJar.aliasInstall(envJar, 'denetworkjava')

targetJar.archiveJar(envJar, 'denetworkjava-{}'.format(versionString))

# archive
targetArchive = globalEnv.targetManager.TargetArchive('DENetworkJava Archive')
globalEnv.targetManager.add('denetworkjava_archive', targetArchive)

archiveFiles = {}
archiveFiles['denetworkjava-{}/LICENSE'.format(versionString)] = envJar.File('#LICENSE')
archiveFiles['denetworkjava-{}/README.md'.format(versionString)] = envJar.File('#README.md')

targetArchive.archiveFiles(envJar, 'denetworkjava-{}'.format(versionString),
	{**targetJar.archiveFiles, **archiveFiles},
	format=globalEnv.targetManager.TargetArchive.formatZip)
targetArchive.aliasArchive(envJar, 'denetworkjava_archive')
