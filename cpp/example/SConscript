import os, sys, shlex
from ternary_variable import TernaryVariable

Import('globalEnv')

versionString = globalEnv['version']

env = globalEnv.Clone()

applyEnvVars = []
applyEnvVars.append('CFLAGS')
applyEnvVars.append('CPPFLAGS')
applyEnvVars.append('CXXFLAGS')
applyEnvVars.append('LDFLAGS')

# Haiku: The PATH found by SCons are wrong in many ways causing binaries to be not found.
#        Replace them with sane values. This is not a 'good' solution but should work.
if sys.platform == 'haiku1':
	import os
	env['ENV']['PATH'] = os.environ['PATH']

# set global construction variables
for x in applyEnvVars:
	if x in os.environ:
		env.MergeFlags({x: shlex.split(os.environ[x])})

if 'CPPFLAGS' in applyEnvVars and 'CPPFLAGS' in os.environ:
	env.Append(MODULE_CPPFLAGS = shlex.split(os.environ['CPPFLAGS']))

if 'LDFLAGS' in applyEnvVars and 'LDFLAGS' in os.environ:
	env.Append(MODULE_LINKFLAGS = shlex.split(os.environ['LDFLAGS']))

if env['with_debug']:
	env.Append(CPPFLAGS = ['-g', '-fno-omit-frame-pointer'])

env.Append(CPPFLAGS = ['-Wall'])
if env['with_warnerrors']:
	env.Append(CPPFLAGS = ['-Werror'])

# determine sanitize flags to use
env.Replace(SANITIZE_FLAGS = [])

if env['with_debug'] and env['with_sanitize']:
	env.Append(SANITIZE_FLAGS = [
		'-fsanitize=address',
		'-fsanitize-address-use-after-scope',
		'-fsanitize=pointer-compare',
		'-fsanitize=pointer-subtract'])
	env.Append(SANITIZE_FLAGS = [
		'-fsanitize=leak'])
	env.Append(SANITIZE_FLAGS = [
		'-fsanitize=undefined',
		'-fsanitize=shift',
		'-fsanitize=shift-exponent',
		'-fsanitize=shift-base',
		'-fsanitize=integer-divide-by-zero',
		'-fsanitize=unreachable',
		'-fsanitize=vla-bound',
		'-fsanitize=null',
		'-fsanitize=return',
		'-fsanitize=signed-integer-overflow',
		'-fsanitize=bounds',
		'-fsanitize=bounds-strict',
		'-fsanitize=alignment',
		'-fsanitize=object-size',
		'-fsanitize=float-divide-by-zero',
		'-fsanitize=float-cast-overflow',
		'-fsanitize=nonnull-attribute',
		'-fsanitize=returns-nonnull-attribute',
		'-fsanitize=bool',
		'-fsanitize=enum',
		'-fsanitize=vptr',
		'-fsanitize=pointer-overflow',
		'-fsanitize=builtin'])

# define the targets array and reports dictionary to be filled
parent_targets = {}

configGroup = 'DENetworkCPP'
env.configReport.add('Treat warnings as errors (dev-builds)', 'with_warnerrors', configGroup)
env.configReport.add('Build with debug symbols for GDB usage', 'with_debug', configGroup)
env.configReport.add('Enable run-time optimizations', 'with_optimizations', configGroup)
env.configReport.add('Enable sanitizer', 'with_sanitize', configGroup)

# build scripts
from glob_files import globFiles

env.Append(CPPFLAGS = env['SANITIZE_FLAGS'])
env.Append(LINKFLAGS = env['SANITIZE_FLAGS'])

envProgram = env.Clone()

targetLibrary = globalEnv.targetManager.targets['denetworkcpp']

targetExample = globalEnv.targetManager.TargetProgram('DENetwork Example')
targetLibrary.applyBuild(envProgram)
globalEnv.targetManager.add('denetworkcpp_example', targetExample)

sources = []
globFiles(envProgram, 'src', '*.cpp', sources)

objects = [envProgram.StaticObject(s) for s in sources]

program = envProgram.Program(target='denetworkcpp_example', source=objects + envProgram['STATIC_LIBS'])
envProgram.Depends(objects, targetLibrary.install)

targetExample.build.extend(program)
targetExample.aliasBuild(envProgram, 'denetworkcpp_example_build')
targetExample.aliasInstall(envProgram, 'denetworkcpp_example')
